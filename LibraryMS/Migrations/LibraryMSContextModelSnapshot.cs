// <auto-generated />
using System;
using LibraryMS.LIBDBModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

namespace LibraryMS.Migrations
{
    [DbContext(typeof(LibraryMSContext))]
    partial class LibraryMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryMS.LIBDBModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_ID");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnName("Address_City")
                        .HasColumnType("nchar(15)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnName("Address_State")
                        .HasColumnType("nchar(2)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnName("Address_Street")
                        .HasColumnType("nchar(25)");

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnName("Address_Zipcode")
                        .HasColumnType("nchar(5)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("Birth_Date")
                        .HasColumnType("date");

                    b.Property<int>("CustomerType")
                        .HasColumnName("Customer_Type");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("First_Name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Last_Name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("MembershipIssued")
                        .HasColumnName("Membership_Issued")
                        .HasColumnType("date");

                    b.Property<string>("MiddleInitial")
                        .IsRequired()
                        .HasColumnName("Middle_Initial")
                        .HasColumnType("char(1)");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("numeric(10, 0)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerType");

                    b.ToTable("CUSTOMER","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .HasColumnName("CUSTOMER_TYPE_ID");

                    b.Property<int>("BookLimit")
                        .HasColumnName("BOOK_LIMIT");

                    b.Property<string>("CustomerTypeName")
                        .IsRequired()
                        .HasColumnName("CUSTOMER_TYPE_NAME")
                        .HasColumnType("nchar(10)");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CUSTOMER_TYPE","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("Employee_ID");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnName("Address_City")
                        .HasColumnType("nchar(20)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnName("Address_State")
                        .HasColumnType("nchar(25)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnName("Address_Street")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnName("Address_Zipcode")
                        .HasColumnType("nchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("First_Name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Last_Name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("numeric(10, 0)");

                    b.HasKey("EmployeeId");

                    b.ToTable("EMPLOYEE","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Media_ID");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("CallNum")
                        .IsRequired()
                        .HasColumnName("call_num")
                        .HasColumnType("nchar(10)");

                    b.Property<int>("CopiesLeft")
                        .HasColumnName("copies_left");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnName("date_added")
                        .HasColumnType("date");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnName("genre")
                        .HasColumnType("nchar(15)");

                    b.Property<int>("Isbn");

                    b.Property<int>("MaxCopies")
                        .HasColumnName("max_copies");

                    b.Property<int>("MediaType")
                        .HasColumnName("media_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nchar(50)");

                    b.HasKey("MediaId");

                    b.HasIndex("MediaId")
                        .IsUnique()
                        .HasName("IX_Media");

                    b.ToTable("MEDIA","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .HasColumnName("MEDIA_TYPE_ID");

                    b.Property<string>("MediaTypeName")
                        .IsRequired()
                        .HasColumnName("MEDIA_TYPE_NAME")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("MediaTypeId");

                    b.ToTable("MEDIA_TYPE","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnName("Section_ID");

                    b.Property<string>("EndCallNum")
                        .IsRequired()
                        .HasColumnName("End_call_num")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("LocationString")
                        .IsRequired()
                        .HasColumnName("locationString")
                        .HasMaxLength(50);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnName("sectionName")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("StartCallNum")
                        .IsRequired()
                        .HasColumnName("Start_call_num")
                        .HasColumnType("nchar(10)");

                    b.HasKey("SectionId");

                    b.ToTable("SECTION","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Users", b =>
                {
                    b.Property<int>("UsernameId")
                        .HasColumnName("Username_ID");

                    b.Property<int>("FailedAttempts")
                        .HasColumnName("Failed_Attempts");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnName("Hashed_Password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastLoginAttempt")
                        .HasColumnName("Last_Login_Attempt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserType")
                        .HasColumnName("User_Type");

                    b.Property<string>("UsernameString")
                        .IsRequired()
                        .HasColumnName("Username_String")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("UsernameId");

                    b.HasIndex("UserType");

                    b.ToTable("USERS","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .HasColumnName("User_Type_Id");

                    b.Property<string>("UserTypeString")
                        .IsRequired()
                        .HasColumnName("User_Type_String")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UserTypeId");

                    b.ToTable("USER_TYPE","LIBDB");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Customer", b =>
                {
                    b.HasOne("LibraryMS.LIBDBModels.Users", "CustomerNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("LibraryMS.LIBDBModels.Customer", "CustomerId")
                        .HasConstraintName("Users_to_Customer");

                    b.HasOne("LibraryMS.LIBDBModels.CustomerType", "CustomerTypeNavigation")
                        .WithMany("Customer")
                        .HasForeignKey("CustomerType")
                        .HasConstraintName("Type_of_Customer");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Employee", b =>
                {
                    b.HasOne("LibraryMS.LIBDBModels.Users", "EmployeeNavigation")
                        .WithOne("Employee")
                        .HasForeignKey("LibraryMS.LIBDBModels.Employee", "EmployeeId")
                        .HasConstraintName("Users_to_Employee");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Media", b =>
                {
                    b.HasOne("LibraryMS.LIBDBModels.MediaType", "MediaNavigation")
                        .WithOne("Media")
                        .HasForeignKey("LibraryMS.LIBDBModels.Media", "MediaId")
                        .HasConstraintName("Type_of_Media");
                });

            modelBuilder.Entity("LibraryMS.LIBDBModels.Users", b =>
                {
                    b.HasOne("LibraryMS.LIBDBModels.UserType", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("FK__USERS__User_Type__6442E2C9");
                });
#pragma warning restore 612, 618
        }
    }
}
